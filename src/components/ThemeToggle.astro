---
const THEMES = ["Light", "Dark", "System"];
import Light from './icons/Light.astro';
import Moon from './icons/Moon.astro';
import System from './icons/System.astro';
---

<div class="relative pt-2 ml-1 mr-1">
    <button
        id="theme-toggle-btn"
        class="appearance-none dark:text-white border-none flex hover:scale-125 transition duration-200"
    >
        <span class="sr-only">Elige el tema</span>
        <Light id="light" class="theme-toggle-icon size-5 transition-all"/>
        <Moon id="dark" class="theme-toggle-icon size-5 transition-all"/>
        <System id="system" class="theme-toggle-icon size-5 transition-all"/>
    </button>
    <div
        id="themes-menu"
        class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
    >
        <ul>
            {THEMES.map((theme) => (
                <li 
                    class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm"
                >
                    {theme}
                </li>
            ))}
        </ul>
    </div>
</div>

<style>
    #themes-menu.open {
        display: inline;
        animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
    }

    @keyframes scale-up-center {
        from {
            transform: scale(0.8);
            opacity: 0;
        }
        to {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>

<script is:inline>
    let remove = null;
    const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
    const themesMenu = document.getElementById("themes-menu");

    const getThemePreference = () => {
        return localStorage.getItem("theme") ?? "system";
    };

    const updateIcon = (themePreference) => {
        document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
            element.style.scale = element.id === themePreference ? "1" : "0";
        });
    };

    const updateTheme = () => {
        if (remove != null) {
            remove();
        }
        
        matchMedia.addEventListener("change", updateTheme);
        remove = () => {
            matchMedia.removeEventListener("change", updateTheme);
        };

        const themePreference = getThemePreference();
        const isDark =
            themePreference === "dark" ||
            (themePreference === "system" && matchMedia.matches);

        updateIcon(themePreference);
        document.documentElement.classList[isDark ? "add" : "remove"]("dark");
    };

    updateTheme();

    document.addEventListener("click", () => themesMenu.classList.remove("open"));

    document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
        e.stopPropagation();
        themesMenu.classList.toggle("open");
    });

    document.querySelectorAll(".themes-menu-option").forEach((element) => {
        element.addEventListener("click", (e) => {
            const selectedTheme = e.target.innerText.toLowerCase().trim();
            localStorage.setItem("theme", selectedTheme);
            updateTheme();
            themesMenu.classList.remove("open"); // Cerrar menú después de seleccionar
        });
    });

    document.addEventListener('astro:after-swap', () => {
        updateTheme();
        window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
    });
</script>